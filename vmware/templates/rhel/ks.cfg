# Mode of Installation - use text/graphical install
text
# Install OS from the cdrom.
install
cdrom
lang en_US.UTF-8

# Locale - Sets one or more available keyboard layouts for the system.
#   Use `localectl list-keymaps` to list all keyboard layouts
keyboard us
# Locale - Time zone
#   Use `timedatectl list-timezones` to list timezones
timezone Europe/Paris


# Sets up the authentication options for the system using the authconfig command
auth --enableshadow --passalgo=sha512 --kickstart
# Sets the system's root password to the password argument.
rootpw {{ kernet_ssh_pass }}

# Creates a new user on the system.
sshkey --username=root "{{ kernet_ssh_pass }}"
# Configures network information for the target system and activates network devices in the installation environment.
network --bootproto=static --ip={{ template_ip }} --netmask={{ netmask_long }} --gateway={{ gateway }} --nameserver={{ dns1 }}{% if dns2 is defined %},{{ dns2 }}{% endif %} --hostname={{ template_hostname }}

selinux --enforcing

firewall --enabled --port=22:tcp
# Determine whether the Initial Setup application starts the first time the system is booted.
firstboot --disabled
# Reboot after the installation is successfully completed
reboot

# System bootloader configuration - specify where the boot record is written (default = mbr)
bootloader --location=mbr
# Removes partitions from the system, prior to creation of new partitions.
clearpart --all --initlabel
# Automatically creates partitions: a root (/) partition (1 GB or larger), a swap partition, and an appropriate /boot partition for the architecture. On large enough drives (50 GB and larger), this also creates a /home partition.
#   Selects one of the predefined automatic partitioning schemes: --type=[lvm,btrfs,plain,thinp]
#   Selects one of the available file system types: --fstype=[ext2, ext3, ext4, xfs (default), and vfat]
#   Encrypts all partitions: --encrypted
autopart
# Any invalid partition tables found on disks are initialized. This command is required when performing an unattended installation on a system with previously initialized disks.
zerombr


# Suppress the Unsupported Hardware Detected alert which would stall the installation
unsupported_hardware
# If present, X is not configured on the installed system.
skipx

# Accept the End User License Agreement (EULA) without user interaction.
eula --agreed
# Modifies the default set of services that will run under the default systemd target. Do NOT use spaces between service names.
services --enabled=NetworkManager,sshd


# Package Selection section
#   --ignoremissing Ignore any packages, groups and environments missing in the installation source, instead of halting the installation
#   --excludedocs Do not install any documentation contained within packages
#   List package groups using `yum group list ids`
%packages --ignoremissing --excludedocs
# @Base
# @Development Tools
# @Server with GUI
@Minimal Install
# Vagrant - needs this to copy initial files via scp
openssh-clients
# Prerequisites for installing VMware Tools or VirtualBox guest additions.
# Put in kickstart to ensure first version installed is from install disk,
# not latest from a mirror.
kernel-headers
kernel-devel
gcc
make
perl
curl
wget
bzip2
dkms
patch
net-tools
git
# Core selinux dependencies installed on 7.x, no need to specify
# Other stuff
sudo
nfs-utils
-fprintd-pam
-intltool
# Optional - other optional software
#man
#ntp
#openssl-devel
#readline-devel
#rsync
#sudo
#vim
#zlib-devel
#libselinux-python

#gcc-c++
#autoconf
#automake
# Firmware - remove unnecessary firmware
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
-ipw*-firmware
-ivtv-firmware
-iwl*-firmware
-libertas-usb8388-firmware
-ql*-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware
%end


%post
# configure ansible user in sudoers
echo "%ansible       ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers.d/ansible
cp /etc/sudoers /etc/sudoers.orig
sed -i "s/^.*requiretty/#Defaults requiretty/" /etc/sudoers
# keep proxy settings through sudo
echo "Defaults env_keep += \"HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY NO_PROXY\"" >> /etc/sudoers


rpm -e open-vm-tools || echo "Passthrough"


mount /dev/sr1 /mnt # Mount VMware Tools ISO
VMW_TOOLS=$(ls /mnt/ | grep .gz) # Retrieve the VMware Tools package name from the directory
tar -zxvf /mnt/${VMW_TOOLS} -C /tmp/
umount /mnt

# Change into VMware Tools installer directory
cd /tmp/vmware-tools-distrib/

# Create silent answer file for VMware Tools Installer
cat > /tmp/answer << __ANSWER__
yes
/usr/bin
/etc
/etc/init.d
/usr/sbin
/usr/lib/vmware-tools
yes
/usr/share/doc/vmware-tools
yes
yes
no
no
yes
no

__ANSWER__
./vmware-install.pl < /tmp/answer

# Final clean up
rm -rf vmware-tools-distrib/
rm -f /tmp/${VMW_TOOLS}
sleep 15
/usr/bin/vmware-toolbox-cmd info update network


echo "Installation Completed"
date
%end